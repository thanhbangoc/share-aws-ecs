AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template deploys a VPC'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.1.0/25
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Public-subnet-A" ]]
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 172.16.2.0/25
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Private-subnet-B" ]]
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-Public-route-table" ]]
  PublicRoute:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  # Attach the public subnets to public route tables, and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  MyRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref "AWS::StackName"
      RepositoryPolicyText: 
        Version: "2012-10-17"
        Statement: 
          - Sid: AllowPushPull
            Effect: Allow
            Principal: 
              AWS:
                - Fn::Join:
                  - ''
                  - - 'arn:aws:iam::'
                    - Ref: AWS::AccountId
                    - ":user/"
                    - thanhbabe
            Action: 
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref "AWS::StackName", "-cluster" ]]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [!Ref "AWS::StackName", "-log-group" ]]
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref "AWS::StackName", "-role" ]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      GroupName: ContainerSecurityGroup
      GroupDescription: Security group for NGINX container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref "AWS::StackName", "-task" ]]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['', [!Ref "AWS::StackName", "-container" ]]
          Image: nginx:1.17.7
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - EC2
        - FARGATE
  EcsService:
    Type: AWS::ECS::Service
    DependsOn: PublicSubnetA
    Properties:
      ServiceName: !Join ['', [!Ref "AWS::StackName", "-ecs-service" ]]
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnetA
          SecurityGroups:
            - !GetAtt ContainerSecurityGroup.GroupId
Outputs:
  VPC:
    Value: !Ref VPC
  PublicSubnets:
    Value: !Join [ ",", [ !Ref PublicSubnetA ]]
  PrivateSubnets:
    Value: !Join [ ",", [ !Ref PrivateSubnetB ]]
  InternetGateway:
    Value: !Ref InternetGateway
  MyRepository:
    Value: !Ref MyRepository
  MyRepositoryArn:
    Value: !GetAtt MyRepository.Arn
  EcsService:
    Value: !Ref EcsService